{"version":3,"sources":["webpack://Scintilla/webpack/universalModuleDefinition","webpack://Scintilla/webpack/bootstrap","webpack://Scintilla/../node_modules/webpack/buildin/global.js","webpack://Scintilla/./Scintilla.js","webpack://Scintilla/./core/game.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;ACnEA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA,6B;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;;;AAGJ;;AAEA;;AAEA;;;AAGA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA,iDAAiD,eAAe;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;;;AAGA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,OAAO;;AAEP;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;AAIA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA,SAAS;;;;;;;AAOT,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;;;AAGA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,GAAG;;AAEH;;AAEA;;;AAGA,gC","file":"scintilla.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Scintilla\"] = factory();\n\telse\n\t\troot[\"Scintilla\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./Scintilla.js\");\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\r\n* @author       Tobias Beise Ulrich\r\n* @license      MIT\r\n*\r\n* @overview\r\n*\r\n* --- Scintilla ---\r\n*\r\n* v0.0.2\r\n*\r\n* tobiasbu.github.io\r\n*\r\n* Scintilla is simple 2D game engine for HTML5 games.\r\n* The first version is only for browsers based in canvas.\r\n*\r\n*/\r\n\r\n/**\r\n* @namespace Scintilla\r\n*/\r\nvar Scintilla = Scintilla || {\r\n  VERSION: '0.0.1',\r\n  Game : require('./core/game.js'),\r\n};\r\n\r\nScintilla.ShapeType = {\r\nRect : 1,\r\nCircle : 2,\r\nPolygon : 3\r\n}\r\n\r\n\r\nmodule.exports = Scintilla;\r\n\r\nglobal.Scintilla = Scintilla;","\r\n/**\r\n* Main class of engine. Holds all main data.\r\n* @class Game\r\n* @constructor\r\n*/\r\nScintilla.Game = function (config) {\r\n\r\n  /**\r\n  * @property {string|HTMLElement} parent - The Games DOM parent.\r\n  * @default\r\n  */\r\n  this.parent = 'body';\r\n  this.width = 800;\r\n  this.height = 600;\r\n\r\n  // object\r\n  this.config = new Scintilla.Config(config);\r\n\r\n  // boolean\r\n  this.systemInited = false;\r\n  this.isRunning = false;\r\n  this.debugMode = false;\r\n\r\n  // float\r\n  this.timeMode = false;\r\n\r\n  // time\r\n  this._spiraling = 0;\r\n  this._lastFrameCount = 0;\r\n\r\n\r\n  //objects\r\n  this.debug = null;\r\n  this.cache = null;\r\n  this.load = null;\r\n  this.canvas = null;\r\n  this.scene = null;\r\n  this.sound = null;\r\n  this.draw = null;\r\n  this.render = null;\r\n  this.universe = null;\r\n  this.world = null;\r\n  this.input = null;\r\n  this.time = null;\r\n  this.component = null;\r\n  this.instance = null;\r\n  this.animationCache = null;\r\n  this.updateGameMethod = null;\r\n  this.pool = null;\r\n\r\n  this.context = null;\r\n\r\n  this.parseConfiguration(this.config);\r\n  //parse config\r\n /* if (arguments.length === 1 && typeof arguments[0] === 'object')\r\n   {\r\n\r\n     this.parseConfiguration(arguments[0]);\r\n\r\n   }\r\n   else\r\n   {\r\n       if (typeof width !== 'undefined')\r\n        this.width = width;\r\n\r\n       if (typeof height !== 'undefined')\r\n        this.height = height;\r\n\r\n      if (typeof timeOutMode !== 'undefined')\r\n        this.timeMode = timeOutMode;\r\n\r\n        if (typeof debugMode !== 'undefined')\r\n        this.debugMode = debugMode;\r\n   }*/\r\n\r\n\r\n   this.init();\r\n\r\n  return this;\r\n\r\n}\r\n\r\n\r\nScintilla.Game.prototype = {\r\n\r\n\r\n\r\n  parseConfiguration : function(config) {\r\n\r\n    //this.config = config;\r\n\r\n    if (config['debug'])\r\n    {\r\n        this.debugMode = config['debug'];\r\n\r\n    }\r\n\r\n    if (config['width'])\r\n    {\r\n        this.width = config['width'];\r\n    }\r\n\r\n    if (config['height'])\r\n    {\r\n        this.height = config['height'];\r\n    }\r\n\r\n    if (config['parent'])\r\n    {\r\n        this.parent = config['parent'];\r\n    }\r\n\r\n  },\r\n  /**\r\n    * Initialize engine\r\n    *\r\n    * @method tobiJS.Game#init()\r\n    * @protected\r\n    */\r\n  init : function() {\r\n\r\n    if (this.systemInited)\r\n        return;\r\n\r\n\r\n\r\n    this.canvas = Scintilla.Canvas.create(this.parent,this.width,this.height);\r\n    this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n\r\n    this.cache = new Scintilla.Cache(this);\r\n    this.load = new Scintilla.LoadManager(this);\r\n    this.time = new Scintilla.Time(this);\r\n    this.universe = new Scintilla.Universe(this);\r\n    this.world = new Scintilla.World(this);\r\n    this.draw = new Scintilla.Draw(this);\r\n    this.render = new Scintilla.Render(this, this.canvas, this.context);\r\n    this.scene = new Scintilla.SceneManager(this);\r\n    this.input = new Scintilla.Input(this);\r\n    this.instance = new Scintilla.Creator(this,this.world);\r\n    this.component = new Scintilla.GameComponents(this);\r\n    this.animationCache = new Scintilla.AnimationCache(this);\r\n    this.sound = new Scintilla.SoundManager(this);\r\n    this.pool = new Scintilla.Pool(this);\r\n    this.physics = new Scintilla.Physics(this);\r\n\r\n    if (this.debugMode)\r\n      this.debug = new Scintilla.Debug(this);\r\n\r\n    this.time.start();\r\n    this.input.init();\r\n    this.sound.start();\r\n    this.world.start();\r\n\r\n    this.updateGameMethod = new Scintilla.UpdateGame(this,this.timeMode);\r\n    this.updateGameMethod.start();\r\n\r\n\r\n\r\n    this.systemInited = true;\r\n    this.isRunning = true;\r\n\r\n\r\n    console.log(\"tobiJS Created!\");\r\n\r\n  },\r\n  \r\n  /**\r\n    * core game loop\r\n    *\r\n    * @method tobiJS.Game#update()\r\n    * @protected\r\n    */\r\n  update : function(time) {\r\n\r\n    if (this.systemInited) {\r\n\r\n\r\n\r\n      this.time.update(time);\r\n\r\n      if (this._spiraling > 1) {\r\n\r\n          this.time.deltaTime = 0;\r\n          this._spiraling = 0;\r\n          this.time.accumalator = 0;\r\n\r\n          this.render._render(this.time.accumulatorDelta);\r\n\r\n      } else {\r\n\r\n      var countFrames = 0;\r\n\r\n      while (this.time.accumalator >= this.time.accumulatorDelta) {\r\n\r\n        //  this.time.updateStart = window.performance.now();\r\n\r\n          this.time.deltaTime = Math.min(this.time.accumalator,this.time.accumulatorDelta) / 1000;\r\n\r\n          this.logic(this.time.deltaTime);\r\n\r\n          //this.time.updateLast =  window.performance.now();\r\n        //  this.time.updateAverage = this.time.updateLast - this.time.updateStart;\r\n\r\n          this.time.accumalator -= this.time.accumulatorDelta;\r\n\r\n          countFrames++;\r\n\r\n          this.time.refresh();\r\n\r\n          if (countFrames >= 240) { // SPIRAL\r\n              //panic();\r\n              this.time.accumalator = 0;\r\n\r\n              break;\r\n          }\r\n      }\r\n\r\n        if (countFrames > this._lastFrameCount)\r\n           this._spiraling++;\r\n       else if (countFrames < this._lastFrameCount)\r\n          this._spiraling = 0;\r\n\r\n          this._lastFrameCount = countFrames;\r\n\r\n            this.render._render(this.time.accumalator/this.time.accumulatorDelta);\r\n\r\n      }\r\n\r\n\r\n\r\n    }\r\n\r\n      //GI.context.fillRect(0, 0, GI.current_room.width, GI.current_room.height);\r\n\r\n        /*var instances = this.current_scene.instances;\r\n\r\n        //\r\n\r\n        instances.forEach( function(instance, value) {\r\n\r\n            instance.draw();\r\n            //console.log(\"asdasd\");\r\n\r\n\r\n        })*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n  },\r\n\r\n  logic : function(timeStep) {\r\n\r\n    this.scene.preUpdate();\r\n    this.scene.update(timeStep);\r\n    this.input.update();\r\n    this.universe.preUpdate(timeStep);\r\n\r\n\r\n    //this.world.camera.update();\r\n\r\n    this.universe.update(timeStep);\r\n    this.physics.update();\r\n    this.sound.update();\r\n\r\n    this.universe._updateTransform();\r\n\r\n\r\n  },\r\n\r\n  destroy : function() {\r\n\r\n    this.updateGameMethod.destroy();\r\n    this.physics.destroy();\r\n    this.universe.destroy();\r\n    this.sound.destroy();\r\n    this.input.destroy();\r\n\r\n    this.debug = null;\r\n    this.cache = null;\r\n    this.load = null;\r\n    this.canvas = null;\r\n    this.scene = null;\r\n    this.sound = null;\r\n    this.draw = null;\r\n    this.universe = null;\r\n    this.world = null;\r\n    this.input = null;\r\n    this.time = null;\r\n    this.render = null;\r\n    this.component = null;\r\n    this.instance = null;\r\n    this.animationCache = null;\r\n    this.updateGameMethod = null;\r\n\r\n\r\n  },\r\n\r\n}\r\n\r\nScintilla.Game.prototype.constructor = Scintilla.Game;\r\n\r\n\r\nmodule.exports = Scintilla.Game;"],"sourceRoot":""}